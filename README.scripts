The scripts in this directory should be executed in the order listed.

CarveEBS.sh:		Configure attached EBS into target partitioning-state.
			ARGUMENT 1: dev-path to target disk
MkChrootTree.sh:	Setup/mount chroot'ed volumes/partitions
			ARGUMENT 1: dev-path to target disk
MkTabs.sh:		Setup chroot's /etc/{fs,m}tab files (some RPMs in the
			Install2Chroot complain if these files are missing
			<no arguments>
			NOTE:	This script will fail with a sed error if the
				AMI build host's /tmp is not its own mount
				(preferably a tmpfs mountpoint)
ChrootBuild.sh:		Install initial, minimal RPM-set into chroot
			<no arguments>
MkCfgFiles.sh:		Create storage config files within chroot
			<no arguments>
MaintUser.sh:		Create unprivileged maintenance user
			ARGUMENT 1: maintenance user accountname
			ARGUMENT 2: maintenance user password
MkTabs.sh:		Something in the Chroot install seems to blow away
			the fstab's swapVol entry. So, run this a second time.
CleanChroot.sh:		Do some file cleanup...
			<no arguments>
HVMprep.sh:		Put GRUB into target EBS's MBR
			ARGUMENT 1: dev-path to target disk
UmountChroot.sh:	Dismount and deactivate the chroot EBS
			<no arguments>


Note: If wanting to start over fresh with an EBS that's previously been used
      to generate an AMI, it is desirable to completely blow away filesystem
      and other structures from the installation-target disk. To do so:

      1) Make LVM forget about any LVM objects related to the creation
         of the chroot environment (e.g. `vgremove VolGroup00`)
      2) Blow away the disk's current partition-table by executing:
         `dd if=/dev/zero of=/dev/xvdf bs=1024 count=10`
      3) Force kernel to re-read the disk's nulled-out partition-table:
         `blockdev --rereadpt /dev/xvdf`

